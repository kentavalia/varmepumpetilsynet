{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# VarmepumpeTilsynet - Heat Pump Service Platform\n\n## Overview\n\nVarmepumpeTilsynet is a comprehensive web application that connects heat pump customers with certified installers in Norway. The platform provides subscription-based services for heat pump maintenance tracking, installer management, and administrative oversight. It's built as a full-stack TypeScript application with a modern React frontend and Express.js backend.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React 18 with TypeScript, utilizing Vite as the build tool for optimal development experience and performance. The UI is crafted with shadcn/ui components built on top of Radix UI primitives, styled with Tailwind CSS for a modern, accessible design system.\n\nKey frontend decisions:\n- **React with TypeScript**: Provides type safety and better developer experience\n- **Vite**: Fast build tool with hot module replacement for efficient development\n- **shadcn/ui + Radix UI**: Pre-built, accessible components reducing development time\n- **Tailwind CSS**: Utility-first CSS framework for consistent styling\n- **Wouter**: Lightweight client-side routing (3kb vs React Router's larger bundle)\n- **TanStack React Query**: Robust data fetching and caching solution\n\n### Backend Architecture\nThe backend follows a RESTful API design using Express.js with TypeScript. It implements a layered architecture separating concerns between routing, business logic, and data access.\n\nKey backend decisions:\n- **Express.js**: Mature, flexible web framework for Node.js\n- **TypeScript**: Type safety across the entire stack\n- **Drizzle ORM**: Type-safe database operations with excellent TypeScript integration\n- **PostgreSQL**: Robust relational database suitable for complex business logic\n- **Neon Database**: Serverless PostgreSQL for scalable cloud deployment\n\n### Authentication System\nUses Replit's built-in OIDC authentication system with session-based storage in PostgreSQL.\n\nRationale: Leverages Replit's secure authentication infrastructure rather than implementing custom auth, reducing security risks and development complexity.\n\n## Key Components\n\n### Database Schema\n- **Users**: Core user information with role-based access (customer, installer, admin)\n- **Customers**: Customer-specific profile data and subscription status\n- **Installers**: Company information, certifications, and approval status\n- **Heat Pumps**: Equipment tracking with service history\n- **Service Areas**: Geographic coverage for installer services\n- **Sessions**: Secure session storage for authentication\n\n### API Routes\n- **Authentication**: `/api/auth/*` - User login/logout, session management\n- **Customers**: `/api/customers` - Customer registration and profile management\n- **Installers**: `/api/installers` - Installer registration, approval, and management\n- **Heat Pumps**: `/api/heat-pumps` - Equipment registration and service tracking\n- **Contacts**: `/api/contacts` - Customer-installer communication\n- **Payments**: `/api/payments` - Stripe integration for subscriptions\n\n### User Roles & Access Control\n- **Customers**: Can register heat pumps, view service history, contact installers\n- **Installers**: Can manage service areas, view customer requests, update service records\n- **Admins**: Full system access, installer approval, subscription management\n\n## Data Flow\n\n1. **User Authentication**: Users authenticate via Replit OIDC, sessions stored in PostgreSQL\n2. **Role-based Routing**: Frontend routes users to appropriate portals based on their role\n3. **Data Fetching**: React Query manages API calls with automatic caching and invalidation\n4. **Form Submission**: Zod validation on both frontend and backend ensures data integrity\n5. **Real-time Updates**: Optimistic updates with React Query provide responsive user experience\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe**: Handles subscription payments and billing\n- Integration includes customer creation, subscription management, and webhook handling\n- Environment variables required: `STRIPE_SECRET_KEY`, `VITE_STRIPE_PUBLIC_KEY`\n\n### Database\n- **Neon Database**: Serverless PostgreSQL provider\n- Connection via `@neondatabase/serverless` for edge-compatible database access\n- Requires `DATABASE_URL` environment variable\n\n### Geographic Data\n- Norwegian county and municipality data hardcoded in the frontend\n- Used for installer service area management and customer location tracking\n\n## Deployment Strategy\n\n### Development Environment\n- Vite dev server for frontend with hot module replacement\n- Express server with tsx for TypeScript execution\n- Database migrations via Drizzle Kit\n- Replit integration with cartographer plugin for enhanced debugging\n\n### Production Build\n- Frontend: Vite builds optimized static assets\n- Backend: esbuild creates bundled Node.js executable\n- Database: Drizzle manages schema migrations\n- Environment: Designed for deployment on platforms supporting Node.js with PostgreSQL\n\n### Environment Variables Required\n- `DATABASE_URL`: PostgreSQL connection string\n- `STRIPE_SECRET_KEY`: Stripe API key for payments\n- `VITE_STRIPE_PUBLIC_KEY`: Stripe publishable key for frontend\n- `SESSION_SECRET`: Secret for session encryption\n- `REPLIT_DOMAINS`: Allowed domains for OIDC\n- `ISSUER_URL`: OIDC issuer URL (defaults to Replit)\n\nThe architecture prioritizes type safety, developer experience, and scalability while maintaining simplicity in deployment and maintenance.","size_bytes":5556},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertCustomerSchema, \n  insertHeatPumpSchema, \n  insertInstallerSchema, \n  insertServiceAreaSchema,\n  insertContactSchema,\n} from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport Stripe from \"stripe\";\n\n// Initialize Stripe\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: \"2024-06-20\" })\n  : null;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Customer routes\n  app.post('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customerData = insertCustomerSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const customer = await storage.createCustomer(customerData);\n      \n      // Update user role\n      await storage.upsertUser({\n        id: userId,\n        role: 'customer',\n        email: req.user.claims.email,\n        firstName: req.user.claims.first_name,\n        lastName: req.user.claims.last_name,\n        profileImageUrl: req.user.claims.profile_image_url,\n      });\n      \n      res.json(customer);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating customer:\", error);\n        res.status(500).json({ message: \"Failed to create customer\" });\n      }\n    }\n  });\n\n  app.get('/api/customers/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customer = await storage.getCustomer(userId);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error fetching customer:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer\" });\n    }\n  });\n\n  app.get('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const customers = await storage.getAllCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post('/api/customers/:id/subscription', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const customerId = parseInt(req.params.id);\n      const { active } = req.body;\n      \n      const customer = await storage.updateCustomerSubscription(customerId, active);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating subscription:\", error);\n      res.status(500).json({ message: \"Failed to update subscription\" });\n    }\n  });\n\n  // Heat pump routes\n  app.post('/api/heat-pumps', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customer = await storage.getCustomer(userId);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      const heatPumpData = insertHeatPumpSchema.parse({\n        ...req.body,\n        customerId: customer.id,\n      });\n      \n      const heatPump = await storage.createHeatPump(heatPumpData);\n      res.json(heatPump);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating heat pump:\", error);\n        res.status(500).json({ message: \"Failed to create heat pump\" });\n      }\n    }\n  });\n\n  app.get('/api/heat-pumps/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customer = await storage.getCustomer(userId);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      const heatPumps = await storage.getHeatPumpsByCustomer(customer.id);\n      res.json(heatPumps);\n    } catch (error) {\n      console.error(\"Error fetching heat pumps:\", error);\n      res.status(500).json({ message: \"Failed to fetch heat pumps\" });\n    }\n  });\n\n  // Installer routes\n  app.post('/api/installers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const installerData = insertInstallerSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const installer = await storage.createInstaller(installerData);\n      \n      // Update user role\n      await storage.upsertUser({\n        id: userId,\n        role: 'installer',\n        email: req.user.claims.email,\n        firstName: req.user.claims.first_name,\n        lastName: req.user.claims.last_name,\n        profileImageUrl: req.user.claims.profile_image_url,\n      });\n      \n      res.json(installer);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating installer:\", error);\n        res.status(500).json({ message: \"Failed to create installer\" });\n      }\n    }\n  });\n\n  app.get('/api/installers/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const installer = await storage.getInstaller(userId);\n      res.json(installer);\n    } catch (error) {\n      console.error(\"Error fetching installer:\", error);\n      res.status(500).json({ message: \"Failed to fetch installer\" });\n    }\n  });\n\n  app.get('/api/installers', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const installers = await storage.getAllInstallers();\n      res.json(installers);\n    } catch (error) {\n      console.error(\"Error fetching installers:\", error);\n      res.status(500).json({ message: \"Failed to fetch installers\" });\n    }\n  });\n\n  app.get('/api/installers/pending', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const installers = await storage.getPendingInstallers();\n      res.json(installers);\n    } catch (error) {\n      console.error(\"Error fetching pending installers:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending installers\" });\n    }\n  });\n\n  app.post('/api/installers/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const installerId = parseInt(req.params.id);\n      const { approved } = req.body;\n      \n      const installer = await storage.updateInstallerApproval(installerId, approved);\n      res.json(installer);\n    } catch (error) {\n      console.error(\"Error updating installer approval:\", error);\n      res.status(500).json({ message: \"Failed to update installer approval\" });\n    }\n  });\n\n  app.get('/api/installers/by-municipality/:municipality', isAuthenticated, async (req: any, res) => {\n    try {\n      const { municipality } = req.params;\n      const installers = await storage.getInstallersByMunicipality(municipality);\n      res.json(installers);\n    } catch (error) {\n      console.error(\"Error fetching installers by municipality:\", error);\n      res.status(500).json({ message: \"Failed to fetch installers\" });\n    }\n  });\n\n  // Service area routes\n  app.post('/api/service-areas', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const installer = await storage.getInstaller(userId);\n      \n      if (!installer) {\n        return res.status(404).json({ message: \"Installer not found\" });\n      }\n      \n      const { serviceAreas } = req.body;\n      \n      // Delete existing service areas\n      await storage.deleteServiceAreasByInstaller(installer.id);\n      \n      // Create new service areas\n      const createdAreas = [];\n      for (const area of serviceAreas) {\n        const serviceAreaData = insertServiceAreaSchema.parse({\n          ...area,\n          installerId: installer.id,\n        });\n        const serviceArea = await storage.createServiceArea(serviceAreaData);\n        createdAreas.push(serviceArea);\n      }\n      \n      res.json(createdAreas);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating service areas:\", error);\n        res.status(500).json({ message: \"Failed to create service areas\" });\n      }\n    }\n  });\n\n  app.get('/api/service-areas/me', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const installer = await storage.getInstaller(userId);\n      \n      if (!installer) {\n        return res.status(404).json({ message: \"Installer not found\" });\n      }\n      \n      const serviceAreas = await storage.getServiceAreasByInstaller(installer.id);\n      res.json(serviceAreas);\n    } catch (error) {\n      console.error(\"Error fetching service areas:\", error);\n      res.status(500).json({ message: \"Failed to fetch service areas\" });\n    }\n  });\n\n  // Contact routes\n  app.post('/api/contacts', isAuthenticated, async (req: any, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      res.json(contact);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating contact:\", error);\n        res.status(500).json({ message: \"Failed to create contact\" });\n      }\n    }\n  });\n\n  app.get('/api/customers/by-municipality/:municipality', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const installer = await storage.getInstaller(userId);\n      \n      if (!installer) {\n        return res.status(404).json({ message: \"Installer not found\" });\n      }\n      \n      const { municipality } = req.params;\n      const customers = await storage.getCustomersByMunicipality(municipality);\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers by municipality:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Admin stats\n  app.get('/api/admin/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  // Stripe subscription routes\n  app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(500).json({ message: \"Stripe not configured\" });\n    }\n\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.stripeSubscriptionId) {\n        const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n        return res.json({\n          subscriptionId: subscription.id,\n          clientSecret: subscription.latest_invoice?.payment_intent?.client_secret,\n        });\n      }\n\n      if (!user.email) {\n        return res.status(400).json({ message: \"User email required\" });\n      }\n\n      const customer = await stripe.customers.create({\n        email: user.email,\n        name: `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim(),\n      });\n\n      if (!process.env.STRIPE_PRICE_ID) {\n        return res.status(500).json({ message: \"Stripe price ID not configured\" });\n      }\n\n      const subscription = await stripe.subscriptions.create({\n        customer: customer.id,\n        items: [{ price: process.env.STRIPE_PRICE_ID }],\n        payment_behavior: \"default_incomplete\",\n        payment_settings: { save_default_payment_method: \"on_subscription\" },\n        expand: [\"latest_invoice.payment_intent\"],\n      });\n\n      await storage.updateUserStripeInfo(userId, customer.id, subscription.id);\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: subscription.latest_invoice?.payment_intent?.client_secret,\n      });\n    } catch (error: any) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ message: \"Failed to create subscription\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13970},"server/storage.ts":{"content":"import {\n  users,\n  customers,\n  heatPumps,\n  installers,\n  serviceAreas,\n  customerInstallerContacts,\n  type User,\n  type UpsertUser,\n  type Customer,\n  type InsertCustomer,\n  type HeatPump,\n  type InsertHeatPump,\n  type Installer,\n  type InsertInstaller,\n  type ServiceArea,\n  type InsertServiceArea,\n  type CustomerInstallerContact,\n  type InsertContact,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, like, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n  \n  // Customer operations\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  getCustomer(userId: string): Promise<Customer | undefined>;\n  getCustomerById(id: number): Promise<Customer | undefined>;\n  updateCustomerSubscription(customerId: number, active: boolean): Promise<Customer>;\n  getCustomersByMunicipality(municipality: string): Promise<Customer[]>;\n  getAllCustomers(): Promise<Customer[]>;\n  \n  // Heat pump operations\n  createHeatPump(heatPump: InsertHeatPump): Promise<HeatPump>;\n  getHeatPumpsByCustomer(customerId: number): Promise<HeatPump[]>;\n  updateHeatPump(id: number, updates: Partial<HeatPump>): Promise<HeatPump>;\n  \n  // Installer operations\n  createInstaller(installer: InsertInstaller): Promise<Installer>;\n  getInstaller(userId: string): Promise<Installer | undefined>;\n  getInstallerById(id: number): Promise<Installer | undefined>;\n  updateInstallerApproval(installerId: number, approved: boolean): Promise<Installer>;\n  getInstallersByMunicipality(municipality: string): Promise<Installer[]>;\n  getAllInstallers(): Promise<Installer[]>;\n  getPendingInstallers(): Promise<Installer[]>;\n  \n  // Service area operations\n  createServiceArea(serviceArea: InsertServiceArea): Promise<ServiceArea>;\n  getServiceAreasByInstaller(installerId: number): Promise<ServiceArea[]>;\n  deleteServiceAreasByInstaller(installerId: number): Promise<void>;\n  \n  // Contact operations\n  createContact(contact: InsertContact): Promise<CustomerInstallerContact>;\n  getContactsByCustomer(customerId: number): Promise<CustomerInstallerContact[]>;\n  getContactsByInstaller(installerId: number): Promise<CustomerInstallerContact[]>;\n  \n  // Statistics\n  getAdminStats(): Promise<{\n    totalCustomers: number;\n    activeInstallers: number;\n    pendingApprovals: number;\n    monthlyRevenue: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Customer operations\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await db\n      .insert(customers)\n      .values(customer)\n      .returning();\n    return newCustomer;\n  }\n\n  async getCustomer(userId: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.userId, userId));\n    return customer;\n  }\n\n  async getCustomerById(id: number): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id));\n    return customer;\n  }\n\n  async updateCustomerSubscription(customerId: number, active: boolean): Promise<Customer> {\n    const [customer] = await db\n      .update(customers)\n      .set({\n        subscriptionActive: active,\n        updatedAt: new Date(),\n      })\n      .where(eq(customers.id, customerId))\n      .returning();\n    return customer;\n  }\n\n  async getCustomersByMunicipality(municipality: string): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(eq(customers.municipality, municipality))\n      .orderBy(desc(customers.createdAt));\n  }\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .orderBy(desc(customers.createdAt));\n  }\n\n  // Heat pump operations\n  async createHeatPump(heatPump: InsertHeatPump): Promise<HeatPump> {\n    const [newHeatPump] = await db\n      .insert(heatPumps)\n      .values(heatPump)\n      .returning();\n    return newHeatPump;\n  }\n\n  async getHeatPumpsByCustomer(customerId: number): Promise<HeatPump[]> {\n    return await db\n      .select()\n      .from(heatPumps)\n      .where(eq(heatPumps.customerId, customerId))\n      .orderBy(desc(heatPumps.createdAt));\n  }\n\n  async updateHeatPump(id: number, updates: Partial<HeatPump>): Promise<HeatPump> {\n    const [heatPump] = await db\n      .update(heatPumps)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(heatPumps.id, id))\n      .returning();\n    return heatPump;\n  }\n\n  // Installer operations\n  async createInstaller(installer: InsertInstaller): Promise<Installer> {\n    const [newInstaller] = await db\n      .insert(installers)\n      .values(installer)\n      .returning();\n    return newInstaller;\n  }\n\n  async getInstaller(userId: string): Promise<Installer | undefined> {\n    const [installer] = await db\n      .select()\n      .from(installers)\n      .where(eq(installers.userId, userId));\n    return installer;\n  }\n\n  async getInstallerById(id: number): Promise<Installer | undefined> {\n    const [installer] = await db\n      .select()\n      .from(installers)\n      .where(eq(installers.id, id));\n    return installer;\n  }\n\n  async updateInstallerApproval(installerId: number, approved: boolean): Promise<Installer> {\n    const [installer] = await db\n      .update(installers)\n      .set({\n        approved,\n        updatedAt: new Date(),\n      })\n      .where(eq(installers.id, installerId))\n      .returning();\n    return installer;\n  }\n\n  async getInstallersByMunicipality(municipality: string): Promise<Installer[]> {\n    return await db\n      .select({\n        id: installers.id,\n        userId: installers.userId,\n        companyName: installers.companyName,\n        orgNumber: installers.orgNumber,\n        contactPerson: installers.contactPerson,\n        email: installers.email,\n        phone: installers.phone,\n        address: installers.address,\n        certified: installers.certified,\n        approved: installers.approved,\n        rating: installers.rating,\n        totalServices: installers.totalServices,\n        createdAt: installers.createdAt,\n        updatedAt: installers.updatedAt,\n      })\n      .from(installers)\n      .innerJoin(serviceAreas, eq(installers.id, serviceAreas.installerId))\n      .where(\n        and(\n          eq(serviceAreas.municipality, municipality),\n          eq(installers.approved, true)\n        )\n      )\n      .orderBy(desc(installers.rating));\n  }\n\n  async getAllInstallers(): Promise<Installer[]> {\n    return await db\n      .select()\n      .from(installers)\n      .orderBy(desc(installers.createdAt));\n  }\n\n  async getPendingInstallers(): Promise<Installer[]> {\n    return await db\n      .select()\n      .from(installers)\n      .where(eq(installers.approved, false))\n      .orderBy(asc(installers.createdAt));\n  }\n\n  // Service area operations\n  async createServiceArea(serviceArea: InsertServiceArea): Promise<ServiceArea> {\n    const [newServiceArea] = await db\n      .insert(serviceAreas)\n      .values(serviceArea)\n      .returning();\n    return newServiceArea;\n  }\n\n  async getServiceAreasByInstaller(installerId: number): Promise<ServiceArea[]> {\n    return await db\n      .select()\n      .from(serviceAreas)\n      .where(eq(serviceAreas.installerId, installerId))\n      .orderBy(asc(serviceAreas.county), asc(serviceAreas.municipality));\n  }\n\n  async deleteServiceAreasByInstaller(installerId: number): Promise<void> {\n    await db.delete(serviceAreas).where(eq(serviceAreas.installerId, installerId));\n  }\n\n  // Contact operations\n  async createContact(contact: InsertContact): Promise<CustomerInstallerContact> {\n    const [newContact] = await db\n      .insert(customerInstallerContacts)\n      .values(contact)\n      .returning();\n    return newContact;\n  }\n\n  async getContactsByCustomer(customerId: number): Promise<CustomerInstallerContact[]> {\n    return await db\n      .select()\n      .from(customerInstallerContacts)\n      .where(eq(customerInstallerContacts.customerId, customerId))\n      .orderBy(desc(customerInstallerContacts.contactedAt));\n  }\n\n  async getContactsByInstaller(installerId: number): Promise<CustomerInstallerContact[]> {\n    return await db\n      .select()\n      .from(customerInstallerContacts)\n      .where(eq(customerInstallerContacts.installerId, installerId))\n      .orderBy(desc(customerInstallerContacts.contactedAt));\n  }\n\n  // Statistics\n  async getAdminStats(): Promise<{\n    totalCustomers: number;\n    activeInstallers: number;\n    pendingApprovals: number;\n    monthlyRevenue: number;\n  }> {\n    const [customerCount] = await db\n      .select({ count: customers.id })\n      .from(customers);\n    \n    const [activeInstallerCount] = await db\n      .select({ count: installers.id })\n      .from(installers)\n      .where(eq(installers.approved, true));\n    \n    const [pendingCount] = await db\n      .select({ count: installers.id })\n      .from(installers)\n      .where(eq(installers.approved, false));\n    \n    const [subscriptionCount] = await db\n      .select({ count: customers.id })\n      .from(customers)\n      .where(eq(customers.subscriptionActive, true));\n\n    return {\n      totalCustomers: customerCount?.count || 0,\n      activeInstallers: activeInstallerCount?.count || 0,\n      pendingApprovals: pendingCount?.count || 0,\n      monthlyRevenue: (subscriptionCount?.count || 0) * 29,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10492},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  boolean,\n  integer,\n  date,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"customer\"), // customer, installer, admin\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customer-specific information\nexport const customers = pgTable(\"customers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  fullName: varchar(\"full_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  county: varchar(\"county\").notNull(),\n  municipality: varchar(\"municipality\").notNull(),\n  subscriptionActive: boolean(\"subscription_active\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Heat pump information\nexport const heatPumps = pgTable(\"heat_pumps\", {\n  id: serial(\"id\").primaryKey(),\n  customerId: integer(\"customer_id\").references(() => customers.id).notNull(),\n  model: varchar(\"model\").notNull(),\n  brand: varchar(\"brand\").notNull(),\n  lastServiceDate: date(\"last_service_date\"),\n  nextServiceDue: date(\"next_service_due\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Installer/company information\nexport const installers = pgTable(\"installers\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  companyName: varchar(\"company_name\").notNull(),\n  orgNumber: varchar(\"org_number\").notNull(),\n  contactPerson: varchar(\"contact_person\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\").notNull(),\n  address: text(\"address\"),\n  certified: boolean(\"certified\").default(false),\n  approved: boolean(\"approved\").default(false),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalServices: integer(\"total_services\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Service areas for installers\nexport const serviceAreas = pgTable(\"service_areas\", {\n  id: serial(\"id\").primaryKey(),\n  installerId: integer(\"installer_id\").references(() => installers.id).notNull(),\n  county: varchar(\"county\").notNull(),\n  municipality: varchar(\"municipality\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customer-installer interactions\nexport const customerInstallerContacts = pgTable(\"customer_installer_contacts\", {\n  id: serial(\"id\").primaryKey(),\n  customerId: integer(\"customer_id\").references(() => customers.id).notNull(),\n  installerId: integer(\"installer_id\").references(() => installers.id).notNull(),\n  contactedAt: timestamp(\"contacted_at\").defaultNow(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, accepted, completed\n  notes: text(\"notes\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one }) => ({\n  customer: one(customers, {\n    fields: [users.id],\n    references: [customers.userId],\n  }),\n  installer: one(installers, {\n    fields: [users.id],\n    references: [installers.userId],\n  }),\n}));\n\nexport const customersRelations = relations(customers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [customers.userId],\n    references: [users.id],\n  }),\n  heatPumps: many(heatPumps),\n  contacts: many(customerInstallerContacts),\n}));\n\nexport const heatPumpsRelations = relations(heatPumps, ({ one }) => ({\n  customer: one(customers, {\n    fields: [heatPumps.customerId],\n    references: [customers.id],\n  }),\n}));\n\nexport const installersRelations = relations(installers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [installers.userId],\n    references: [users.id],\n  }),\n  serviceAreas: many(serviceAreas),\n  contacts: many(customerInstallerContacts),\n}));\n\nexport const serviceAreasRelations = relations(serviceAreas, ({ one }) => ({\n  installer: one(installers, {\n    fields: [serviceAreas.installerId],\n    references: [installers.id],\n  }),\n}));\n\nexport const customerInstallerContactsRelations = relations(\n  customerInstallerContacts,\n  ({ one }) => ({\n    customer: one(customers, {\n      fields: [customerInstallerContacts.customerId],\n      references: [customers.id],\n    }),\n    installer: one(installers, {\n      fields: [customerInstallerContacts.installerId],\n      references: [installers.id],\n    }),\n  }),\n);\n\n// Zod schemas\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHeatPumpSchema = createInsertSchema(heatPumps).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInstallerSchema = createInsertSchema(installers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceAreaSchema = createInsertSchema(serviceAreas).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(customerInstallerContacts).omit({\n  id: true,\n  contactedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type HeatPump = typeof heatPumps.$inferSelect;\nexport type InsertHeatPump = z.infer<typeof insertHeatPumpSchema>;\nexport type Installer = typeof installers.$inferSelect;\nexport type InsertInstaller = z.infer<typeof insertInstallerSchema>;\nexport type ServiceArea = typeof serviceAreas.$inferSelect;\nexport type InsertServiceArea = z.infer<typeof insertServiceAreaSchema>;\nexport type CustomerInstallerContact = typeof customerInstallerContacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n","size_bytes":6709},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Customer from \"@/pages/customer\";\nimport Installer from \"@/pages/installer\";\nimport Admin from \"@/pages/admin\";\nimport Subscribe from \"@/pages/subscribe\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/customer\" component={Landing} />\n          <Route path=\"/installer\" component={Landing} />\n          <Route path=\"/admin\" component={Landing} />\n          <Route path=\"/subscribe\" component={Landing} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/customer\" component={Customer} />\n          <Route path=\"/installer\" component={Installer} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1614},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.9%, 10%);\n  --accent: hsl(240, 4.8%, 95.9%);\n  --accent-foreground: hsl(240, 5.9%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 5%, 64.9%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Norwegian Business Theme Colors */\n:root {\n  --primary: hsl(207, 90%, 54%); /* Professional blue */\n  --success: hsl(142, 71%, 45%); /* Success green */\n  --warning: hsl(45, 93%, 47%); /* Warning yellow */\n  --danger: hsl(0, 84%, 60%); /* Danger red */\n  --muted: hsl(240, 5%, 64.9%); /* Muted gray */\n}\n\n/* Custom Norwegian styling */\n.portal-content {\n  transition: all 0.3s ease-in-out;\n}\n\n/* Professional button styling */\n.btn-primary {\n  @apply bg-primary text-primary-foreground hover:bg-primary/90;\n}\n\n.btn-success {\n  @apply bg-green-600 text-white hover:bg-green-700;\n}\n\n.btn-warning {\n  @apply bg-yellow-500 text-white hover:bg-yellow-600;\n}\n\n.btn-danger {\n  @apply bg-red-600 text-white hover:bg-red-700;\n}\n\n/* Card hover effects */\n.card-hover {\n  @apply transition-all duration-200 hover:shadow-md hover:border-primary/20;\n}\n\n/* Status badges */\n.status-active {\n  @apply bg-green-100 text-green-800 border-green-200;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800 border-yellow-200;\n}\n\n.status-inactive {\n  @apply bg-red-100 text-red-800 border-red-200;\n}\n\n/* Form styling */\n.form-section {\n  @apply space-y-6 p-6 bg-white rounded-lg shadow-sm border;\n}\n\n/* Norwegian typography */\n.text-norwegian {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  font-feature-settings: 'liga' 1, 'kern' 1;\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .mobile-card {\n    @apply mx-4 px-4 py-3;\n  }\n  \n  .mobile-nav {\n    @apply px-2 py-1;\n  }\n}\n\n/* Stats cards */\n.stats-card {\n  @apply bg-white rounded-lg shadow-sm border p-6 transition-all duration-200 hover:shadow-md;\n}\n\n/* Loading states */\n.loading-spinner {\n  @apply animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full;\n}\n\n/* Professional table styling */\n.professional-table {\n  @apply w-full text-sm;\n}\n\n.professional-table thead {\n  @apply bg-gray-50;\n}\n\n.professional-table th {\n  @apply px-4 py-3 text-left font-medium text-gray-700;\n}\n\n.professional-table td {\n  @apply px-4 py-3 border-b border-gray-200;\n}\n\n.professional-table tbody tr:hover {\n  @apply bg-gray-50;\n}\n\n/* Badge styling */\n.badge {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n\n.badge-success {\n  @apply bg-green-100 text-green-800;\n}\n\n.badge-warning {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.badge-danger {\n  @apply bg-red-100 text-red-800;\n}\n\n.badge-info {\n  @apply bg-blue-100 text-blue-800;\n}\n\n/* Gradient backgrounds */\n.gradient-primary {\n  background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(220, 90%, 60%) 100%);\n}\n\n.gradient-success {\n  background: linear-gradient(135deg, hsl(142, 71%, 45%) 0%, hsl(152, 71%, 50%) 100%);\n}\n\n/* Focus states */\n.focus-primary {\n  @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2;\n}\n\n/* Norwegian professional spacing */\n.section-spacing {\n  @apply py-12 px-4 sm:px-6 lg:px-8;\n}\n\n.content-spacing {\n  @apply py-6 px-4 sm:px-6 lg:px-8;\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(240, 5.9%, 95%);\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(240, 5%, 64.9%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(240, 5%, 54.9%);\n}\n","size_bytes":5024},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/data/municipalities.ts":{"content":"export interface Municipality {\n  name: string;\n  code: string;\n}\n\nexport interface County {\n  name: string;\n  code: string;\n  municipalities: Municipality[];\n}\n\nexport const norwegianCounties: County[] = [\n  {\n    name: \"Oslo\",\n    code: \"03\",\n    municipalities: [\n      { name: \"Oslo\", code: \"0301\" },\n    ],\n  },\n  {\n    name: \"Viken\",\n    code: \"30\",\n    municipalities: [\n      { name: \"Bærum\", code: \"3024\" },\n      { name: \"Asker\", code: \"3025\" },\n      { name: \"Drammen\", code: \"3005\" },\n      { name: \"Kongsberg\", code: \"3006\" },\n      { name: \"Ringerike\", code: \"3007\" },\n      { name: \"Hole\", code: \"3008\" },\n      { name: \"Flå\", code: \"3009\" },\n      { name: \"Nesbyen\", code: \"3010\" },\n      { name: \"Gol\", code: \"3011\" },\n      { name: \"Hemsedal\", code: \"3012\" },\n      { name: \"Ål\", code: \"3013\" },\n      { name: \"Hol\", code: \"3014\" },\n      { name: \"Sigdal\", code: \"3015\" },\n      { name: \"Krødsherad\", code: \"3016\" },\n      { name: \"Modum\", code: \"3017\" },\n      { name: \"Øvre Eiker\", code: \"3018\" },\n      { name: \"Nedre Eiker\", code: \"3019\" },\n      { name: \"Lier\", code: \"3020\" },\n      { name: \"Flesberg\", code: \"3021\" },\n      { name: \"Rollag\", code: \"3022\" },\n      { name: \"Nore og Uvdal\", code: \"3023\" },\n    ],\n  },\n  {\n    name: \"Innlandet\",\n    code: \"34\",\n    municipalities: [\n      { name: \"Lillehammer\", code: \"3412\" },\n      { name: \"Gjøvik\", code: \"3411\" },\n      { name: \"Hamar\", code: \"3403\" },\n      { name: \"Elverum\", code: \"3407\" },\n      { name: \"Kongsvinger\", code: \"3401\" },\n      { name: \"Ringsaker\", code: \"3404\" },\n      { name: \"Løten\", code: \"3405\" },\n      { name: \"Stange\", code: \"3406\" },\n      { name: \"Nord-Odal\", code: \"3408\" },\n      { name: \"Sør-Odal\", code: \"3409\" },\n      { name: \"Eidskog\", code: \"3410\" },\n      { name: \"Grue\", code: \"3413\" },\n      { name: \"Åsnes\", code: \"3414\" },\n      { name: \"Våler\", code: \"3415\" },\n      { name: \"Trysil\", code: \"3416\" },\n      { name: \"Åmot\", code: \"3417\" },\n      { name: \"Stor-Elvdal\", code: \"3418\" },\n      { name: \"Rendalen\", code: \"3419\" },\n      { name: \"Engerdal\", code: \"3420\" },\n      { name: \"Tolga\", code: \"3421\" },\n      { name: \"Tynset\", code: \"3422\" },\n      { name: \"Alvdal\", code: \"3423\" },\n      { name: \"Folldal\", code: \"3424\" },\n      { name: \"Os\", code: \"3425\" },\n      { name: \"Dovre\", code: \"3426\" },\n      { name: \"Lesja\", code: \"3427\" },\n      { name: \"Skjåk\", code: \"3428\" },\n      { name: \"Lom\", code: \"3429\" },\n      { name: \"Vågå\", code: \"3430\" },\n      { name: \"Nord-Fron\", code: \"3431\" },\n      { name: \"Sel\", code: \"3432\" },\n      { name: \"Sør-Fron\", code: \"3433\" },\n      { name: \"Ringebu\", code: \"3434\" },\n      { name: \"Øyer\", code: \"3435\" },\n      { name: \"Gausdal\", code: \"3436\" },\n      { name: \"Østre Toten\", code: \"3437\" },\n      { name: \"Vestre Toten\", code: \"3438\" },\n      { name: \"Jevnaker\", code: \"3439\" },\n      { name: \"Lunner\", code: \"3440\" },\n      { name: \"Gran\", code: \"3441\" },\n      { name: \"Søndre Land\", code: \"3442\" },\n      { name: \"Nordre Land\", code: \"3443\" },\n      { name: \"Sør-Aurdal\", code: \"3444\" },\n      { name: \"Etnedal\", code: \"3445\" },\n      { name: \"Nord-Aurdal\", code: \"3446\" },\n      { name: \"Vestre Slidre\", code: \"3447\" },\n      { name: \"Øystre Slidre\", code: \"3448\" },\n      { name: \"Vang\", code: \"3449\" },\n    ],\n  },\n  {\n    name: \"Vestfold og Telemark\",\n    code: \"38\",\n    municipalities: [\n      { name: \"Porsgrunn\", code: \"3806\" },\n      { name: \"Skien\", code: \"3807\" },\n      { name: \"Notodden\", code: \"3808\" },\n      { name: \"Siljan\", code: \"3809\" },\n      { name: \"Bamble\", code: \"3810\" },\n      { name: \"Kragerø\", code: \"3811\" },\n      { name: \"Drangedal\", code: \"3812\" },\n      { name: \"Nome\", code: \"3813\" },\n      { name: \"Midt-Telemark\", code: \"3814\" },\n      { name: \"Tinn\", code: \"3815\" },\n      { name: \"Hjartdal\", code: \"3816\" },\n      { name: \"Seljord\", code: \"3817\" },\n      { name: \"Kviteseid\", code: \"3818\" },\n      { name: \"Nissedal\", code: \"3819\" },\n      { name: \"Fyresdal\", code: \"3820\" },\n      { name: \"Tokke\", code: \"3821\" },\n      { name: \"Vinje\", code: \"3822\" },\n      { name: \"Sandefjord\", code: \"3804\" },\n      { name: \"Tønsberg\", code: \"3803\" },\n      { name: \"Færder\", code: \"3805\" },\n      { name: \"Larvik\", code: \"3802\" },\n      { name: \"Holmestrand\", code: \"3801\" },\n    ],\n  },\n  {\n    name: \"Agder\",\n    code: \"42\",\n    municipalities: [\n      { name: \"Kristiansand\", code: \"4204\" },\n      { name: \"Mandal\", code: \"4201\" },\n      { name: \"Farsund\", code: \"4202\" },\n      { name: \"Flekkefjord\", code: \"4203\" },\n      { name: \"Vennesla\", code: \"4205\" },\n      { name: \"Songdalen\", code: \"4206\" },\n      { name: \"Søgne\", code: \"4207\" },\n      { name: \"Grimstad\", code: \"4208\" },\n      { name: \"Arendal\", code: \"4209\" },\n      { name: \"Gjerstad\", code: \"4210\" },\n      { name: \"Vegårshei\", code: \"4211\" },\n      { name: \"Tvedestrand\", code: \"4212\" },\n      { name: \"Froland\", code: \"4213\" },\n      { name: \"Lillesand\", code: \"4214\" },\n      { name: \"Birkenes\", code: \"4215\" },\n      { name: \"Åmli\", code: \"4216\" },\n      { name: \"Iveland\", code: \"4217\" },\n      { name: \"Evje og Hornnes\", code: \"4218\" },\n      { name: \"Bygland\", code: \"4219\" },\n      { name: \"Valle\", code: \"4220\" },\n      { name: \"Bykle\", code: \"4221\" },\n      { name: \"Kvinesdal\", code: \"4222\" },\n      { name: \"Sirdal\", code: \"4223\" },\n      { name: \"Lyngdal\", code: \"4224\" },\n      { name: \"Hægebostad\", code: \"4225\" },\n      { name: \"Lindesnes\", code: \"4226\" },\n    ],\n  },\n  {\n    name: \"Rogaland\",\n    code: \"11\",\n    municipalities: [\n      { name: \"Stavanger\", code: \"1103\" },\n      { name: \"Haugesund\", code: \"1106\" },\n      { name: \"Sandnes\", code: \"1108\" },\n      { name: \"Sokndal\", code: \"1111\" },\n      { name: \"Lund\", code: \"1112\" },\n      { name: \"Bjerkreim\", code: \"1114\" },\n      { name: \"Eigersund\", code: \"1101\" },\n      { name: \"Sola\", code: \"1124\" },\n      { name: \"Randaberg\", code: \"1127\" },\n      { name: \"Strand\", code: \"1130\" },\n      { name: \"Hjelmeland\", code: \"1133\" },\n      { name: \"Suldal\", code: \"1134\" },\n      { name: \"Sauda\", code: \"1135\" },\n      { name: \"Kvitsøy\", code: \"1149\" },\n      { name: \"Bokn\", code: \"1145\" },\n      { name: \"Tysvær\", code: \"1146\" },\n      { name: \"Karmøy\", code: \"1149\" },\n      { name: \"Utsira\", code: \"1151\" },\n      { name: \"Vindafjord\", code: \"1160\" },\n      { name: \"Etne\", code: \"1211\" },\n      { name: \"Sveio\", code: \"1216\" },\n      { name: \"Time\", code: \"1121\" },\n      { name: \"Gjesdal\", code: \"1122\" },\n      { name: \"Klepp\", code: \"1120\" },\n      { name: \"Hå\", code: \"1119\" },\n      { name: \"Forsand\", code: \"1129\" },\n    ],\n  },\n  {\n    name: \"Vestland\",\n    code: \"46\",\n    municipalities: [\n      { name: \"Bergen\", code: \"4601\" },\n      { name: \"Kinn\", code: \"4602\" },\n      { name: \"Etne\", code: \"4603\" },\n      { name: \"Sveio\", code: \"4604\" },\n      { name: \"Bømlo\", code: \"4605\" },\n      { name: \"Stord\", code: \"4606\" },\n      { name: \"Fitjar\", code: \"4607\" },\n      { name: \"Tysnes\", code: \"4608\" },\n      { name: \"Kvinnherad\", code: \"4609\" },\n      { name: \"Ullensvang\", code: \"4610\" },\n      { name: \"Eidfjord\", code: \"4611\" },\n      { name: \"Ulvik\", code: \"4612\" },\n      { name: \"Granvin\", code: \"4613\" },\n      { name: \"Voss\", code: \"4614\" },\n      { name: \"Kvam\", code: \"4615\" },\n      { name: \"Samnanger\", code: \"4616\" },\n      { name: \"Bjørnafjorden\", code: \"4617\" },\n      { name: \"Austevoll\", code: \"4618\" },\n      { name: \"Øygarden\", code: \"4619\" },\n      { name: \"Askøy\", code: \"4620\" },\n      { name: \"Vaksdal\", code: \"4621\" },\n      { name: \"Modalen\", code: \"4622\" },\n      { name: \"Osterøy\", code: \"4623\" },\n      { name: \"Alver\", code: \"4624\" },\n      { name: \"Austrheim\", code: \"4625\" },\n      { name: \"Fedje\", code: \"4626\" },\n      { name: \"Masfjorden\", code: \"4627\" },\n      { name: \"Gulen\", code: \"4628\" },\n      { name: \"Solund\", code: \"4629\" },\n      { name: \"Hyllestad\", code: \"4630\" },\n      { name: \"Høyanger\", code: \"4631\" },\n      { name: \"Vik\", code: \"4632\" },\n      { name: \"Balestrand\", code: \"4633\" },\n      { name: \"Leikanger\", code: \"4634\" },\n      { name: \"Sogndal\", code: \"4635\" },\n      { name: \"Aurland\", code: \"4636\" },\n      { name: \"Lærdal\", code: \"4637\" },\n      { name: \"Årdal\", code: \"4638\" },\n      { name: \"Luster\", code: \"4639\" },\n      { name: \"Askvoll\", code: \"4640\" },\n      { name: \"Fjaler\", code: \"4641\" },\n      { name: \"Sunnfjord\", code: \"4642\" },\n      { name: \"Bremanger\", code: \"4643\" },\n      { name: \"Stad\", code: \"4644\" },\n      { name: \"Gloppen\", code: \"4645\" },\n      { name: \"Stryn\", code: \"4646\" },\n    ],\n  },\n  {\n    name: \"Møre og Romsdal\",\n    code: \"15\",\n    municipalities: [\n      { name: \"Molde\", code: \"1506\" },\n      { name: \"Ålesund\", code: \"1507\" },\n      { name: \"Kristiansund\", code: \"1505\" },\n      { name: \"Vanylven\", code: \"1511\" },\n      { name: \"Sande\", code: \"1514\" },\n      { name: \"Herøy\", code: \"1515\" },\n      { name: \"Ulstein\", code: \"1516\" },\n      { name: \"Hareid\", code: \"1517\" },\n      { name: \"Volda\", code: \"1519\" },\n      { name: \"Ørsta\", code: \"1520\" },\n      { name: \"Ørskog\", code: \"1521\" },\n      { name: \"Norddal\", code: \"1525\" },\n      { name: \"Stranda\", code: \"1526\" },\n      { name: \"Stordal\", code: \"1527\" },\n      { name: \"Sykkylven\", code: \"1528\" },\n      { name: \"Skodje\", code: \"1529\" },\n      { name: \"Sula\", code: \"1531\" },\n      { name: \"Giske\", code: \"1532\" },\n      { name: \"Haram\", code: \"1534\" },\n      { name: \"Vestnes\", code: \"1535\" },\n      { name: \"Rauma\", code: \"1539\" },\n      { name: \"Nesset\", code: \"1540\" },\n      { name: \"Midsund\", code: \"1541\" },\n      { name: \"Aukra\", code: \"1542\" },\n      { name: \"Eide\", code: \"1543\" },\n      { name: \"Averøy\", code: \"1554\" },\n      { name: \"Gjemnes\", code: \"1557\" },\n      { name: \"Tingvoll\", code: \"1560\" },\n      { name: \"Sunndal\", code: \"1563\" },\n      { name: \"Surnadal\", code: \"1566\" },\n      { name: \"Rindal\", code: \"1567\" },\n      { name: \"Halsa\", code: \"1571\" },\n      { name: \"Smøla\", code: \"1573\" },\n      { name: \"Aure\", code: \"1576\" },\n      { name: \"Volda\", code: \"1577\" },\n      { name: \"Fjord\", code: \"1578\" },\n      { name: \"Hustadvika\", code: \"1579\" },\n    ],\n  },\n  {\n    name: \"Trøndelag\",\n    code: \"50\",\n    municipalities: [\n      { name: \"Trondheim\", code: \"5001\" },\n      { name: \"Steinkjer\", code: \"5006\" },\n      { name: \"Namsos\", code: \"5007\" },\n      { name: \"Frøya\", code: \"5014\" },\n      { name: \"Osen\", code: \"5020\" },\n      { name: \"Oppdal\", code: \"5021\" },\n      { name: \"Rennebu\", code: \"5022\" },\n      { name: \"Røros\", code: \"5025\" },\n      { name: \"Holtålen\", code: \"5026\" },\n      { name: \"Midtre Gauldal\", code: \"5027\" },\n      { name: \"Melhus\", code: \"5028\" },\n      { name: \"Skaun\", code: \"5029\" },\n      { name: \"Malvik\", code: \"5031\" },\n      { name: \"Selbu\", code: \"5032\" },\n      { name: \"Tydal\", code: \"5033\" },\n      { name: \"Meråker\", code: \"5034\" },\n      { name: \"Stjørdal\", code: \"5035\" },\n      { name: \"Frosta\", code: \"5036\" },\n      { name: \"Levanger\", code: \"5037\" },\n      { name: \"Verdal\", code: \"5038\" },\n      { name: \"Snåsa\", code: \"5041\" },\n      { name: \"Lierne\", code: \"5042\" },\n      { name: \"Røyrvik\", code: \"5043\" },\n      { name: \"Namsskogan\", code: \"5044\" },\n      { name: \"Grong\", code: \"5045\" },\n      { name: \"Høylandet\", code: \"5046\" },\n      { name: \"Overhalla\", code: \"5047\" },\n      { name: \"Flatanger\", code: \"5049\" },\n      { name: \"Leka\", code: \"5052\" },\n      { name: \"Inderøy\", code: \"5053\" },\n      { name: \"Indre Fosen\", code: \"5054\" },\n      { name: \"Heim\", code: \"5055\" },\n      { name: \"Hitra\", code: \"5056\" },\n      { name: \"Ørland\", code: \"5057\" },\n      { name: \"Åfjord\", code: \"5058\" },\n      { name: \"Orkland\", code: \"5059\" },\n      { name: \"Nærøysund\", code: \"5060\" },\n      { name: \"Rindal\", code: \"5061\" },\n    ],\n  },\n  {\n    name: \"Nordland\",\n    code: \"18\",\n    municipalities: [\n      { name: \"Bodø\", code: \"1804\" },\n      { name: \"Narvik\", code: \"1806\" },\n      { name: \"Bindal\", code: \"1811\" },\n      { name: \"Sømna\", code: \"1812\" },\n      { name: \"Brønnøy\", code: \"1813\" },\n      { name: \"Vega\", code: \"1815\" },\n      { name: \"Vevelstad\", code: \"1816\" },\n      { name: \"Herøy\", code: \"1818\" },\n      { name: \"Alstahaug\", code: \"1820\" },\n      { name: \"Leirfjord\", code: \"1821\" },\n      { name: \"Vefsn\", code: \"1824\" },\n      { name: \"Grane\", code: \"1825\" },\n      { name: \"Hattfjelldal\", code: \"1826\" },\n      { name: \"Dønna\", code: \"1827\" },\n      { name: \"Nesna\", code: \"1828\" },\n      { name: \"Hemnes\", code: \"1832\" },\n      { name: \"Rana\", code: \"1833\" },\n      { name: \"Lurøy\", code: \"1834\" },\n      { name: \"Træna\", code: \"1835\" },\n      { name: \"Rødøy\", code: \"1836\" },\n      { name: \"Meløy\", code: \"1837\" },\n      { name: \"Gildeskål\", code: \"1838\" },\n      { name: \"Beiarn\", code: \"1839\" },\n      { name: \"Saltdal\", code: \"1840\" },\n      { name: \"Fauske\", code: \"1841\" },\n      { name: \"Sørfold\", code: \"1845\" },\n      { name: \"Steigen\", code: \"1848\" },\n      { name: \"Hamarøy\", code: \"1849\" },\n      { name: \"Tysfjord\", code: \"1850\" },\n      { name: \"Lødingen\", code: \"1851\" },\n      { name: \"Tjeldsund\", code: \"1852\" },\n      { name: \"Evenes\", code: \"1853\" },\n      { name: \"Røst\", code: \"1856\" },\n      { name: \"Værøy\", code: \"1857\" },\n      { name: \"Flakstad\", code: \"1859\" },\n      { name: \"Vestvågøy\", code: \"1860\" },\n      { name: \"Vågan\", code: \"1865\" },\n      { name: \"Hadsel\", code: \"1866\" },\n      { name: \"Bø\", code: \"1867\" },\n      { name: \"Øksnes\", code: \"1868\" },\n      { name: \"Sortland\", code: \"1870\" },\n      { name: \"Andøy\", code: \"1871\" },\n      { name: \"Moskenes\", code: \"1874\" },\n    ],\n  },\n  {\n    name: \"Troms og Finnmark\",\n    code: \"54\",\n    municipalities: [\n      { name: \"Tromsø\", code: \"5401\" },\n      { name: \"Harstad\", code: \"5402\" },\n      { name: \"Alta\", code: \"5403\" },\n      { name: \"Vardø\", code: \"5404\" },\n      { name: \"Vadsø\", code: \"5405\" },\n      { name: \"Hammerfest\", code: \"5406\" },\n      { name: \"Kvæfjord\", code: \"5411\" },\n      { name: \"Tjeldsund\", code: \"5412\" },\n      { name: \"Ibestad\", code: \"5413\" },\n      { name: \"Gratangen\", code: \"5414\" },\n      { name: \"Lavangen\", code: \"5415\" },\n      { name: \"Bardu\", code: \"5418\" },\n      { name: \"Salangen\", code: \"5419\" },\n      { name: \"Målselv\", code: \"5420\" },\n      { name: \"Sørreisa\", code: \"5421\" },\n      { name: \"Dyrøy\", code: \"5422\" },\n      { name: \"Senja\", code: \"5423\" },\n      { name: \"Balsfjord\", code: \"5424\" },\n      { name: \"Karlsøy\", code: \"5425\" },\n      { name: \"Lyngen\", code: \"5426\" },\n      { name: \"Storfjord\", code: \"5427\" },\n      { name: \"Kåfjord\", code: \"5428\" },\n      { name: \"Skjervøy\", code: \"5429\" },\n      { name: \"Nordreisa\", code: \"5430\" },\n      { name: \"Kvænangen\", code: \"5431\" },\n      { name: \"Kautokeino\", code: \"5432\" },\n      { name: \"Loppa\", code: \"5433\" },\n      { name: \"Hasvik\", code: \"5434\" },\n      { name: \"Måsøy\", code: \"5435\" },\n      { name: \"Nordkapp\", code: \"5436\" },\n      { name: \"Porsanger\", code: \"5437\" },\n      { name: \"Karasjok\", code: \"5438\" },\n      { name: \"Lebesby\", code: \"5439\" },\n      { name: \"Gamvik\", code: \"5440\" },\n      { name: \"Berlevåg\", code: \"5441\" },\n      { name: \"Tana\", code: \"5442\" },\n      { name: \"Nesseby\", code: \"5443\" },\n      { name: \"Båtsfjord\", code: \"5444\" },\n      { name: \"Sør-Varanger\", code: \"5445\" },\n    ],\n  },\n];\n\nexport const getAllMunicipalities = (): Municipality[] => {\n  return norwegianCounties.reduce<Municipality[]>((acc, county) => {\n    return acc.concat(county.municipalities);\n  }, []);\n};\n\nexport const getMunicipalitiesByCounty = (countyCode: string): Municipality[] => {\n  const county = norwegianCounties.find(c => c.code === countyCode);\n  return county?.municipalities || [];\n};\n","size_bytes":15728},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/ui/navigation\";\nimport StatsCard from \"@/components/ui/stats-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Settings, \n  TrendingUp, \n  Clock, \n  UserCheck, \n  Check, \n  X,\n  Download,\n  Mail,\n  CreditCard,\n  MapPin,\n  History,\n  UserPlus,\n  CheckCircle,\n  Eye,\n  Edit\n} from \"lucide-react\";\n\ninterface AdminStats {\n  totalCustomers: number;\n  activeInstallers: number;\n  pendingApprovals: number;\n  monthlyRevenue: number;\n}\n\ninterface Customer {\n  id: number;\n  fullName: string;\n  email: string;\n  municipality: string;\n  subscriptionActive: boolean;\n  createdAt: string;\n}\n\ninterface Installer {\n  id: number;\n  companyName: string;\n  orgNumber: string;\n  email: string;\n  approved: boolean;\n  createdAt: string;\n}\n\nexport default function Admin() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect to login if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Ikke autorisert\",\n        description: \"Du må logge inn for å se denne siden.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && isAuthenticated && user?.role !== 'admin') {\n      toast({\n        title: \"Ingen tilgang\",\n        description: \"Du har ikke tilgang til administrasjonspanelet.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  // Fetch admin stats\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Fetch all customers\n  const { data: customers, isLoading: customersLoading } = useQuery({\n    queryKey: [\"/api/customers\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Fetch pending installers\n  const { data: pendingInstallers, isLoading: pendingLoading } = useQuery({\n    queryKey: [\"/api/installers/pending\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Approve installer mutation\n  const approveInstallerMutation = useMutation({\n    mutationFn: async ({ installerId, approved }: { installerId: number; approved: boolean }) => {\n      await apiRequest(\"POST\", `/api/installers/${installerId}/approve`, { approved });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vellykket\",\n        description: \"Installatør status oppdatert!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/installers/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ikke autorisert\",\n          description: \"Du er logget ut. Logger inn igjen...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Feil\",\n        description: \"Kunne ikke oppdatere installatør status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update subscription mutation\n  const updateSubscriptionMutation = useMutation({\n    mutationFn: async ({ customerId, active }: { customerId: number; active: boolean }) => {\n      await apiRequest(\"POST\", `/api/customers/${customerId}/subscription`, { active });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vellykket\",\n        description: \"Abonnement status oppdatert!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ikke autorisert\",\n          description: \"Du er logget ut. Logger inn igjen...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Feil\",\n        description: \"Kunne ikke oppdatere abonnement status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || statsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Laster...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Adminpanel</h2>\n          <p className=\"text-muted-foreground\">Administrer alle aspekter av VarmepumpeTilsynet</p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title=\"Totale kunder\"\n            value={stats?.totalCustomers || 0}\n            icon={Users}\n            trend=\"+12% denne måneden\"\n            trendPositive={true}\n          />\n          <StatsCard\n            title=\"Aktive installatører\"\n            value={stats?.activeInstallers || 0}\n            icon={Settings}\n            trend=\"+5% denne måneden\"\n            trendPositive={true}\n          />\n          <StatsCard\n            title=\"Månedlig inntekt (kr)\"\n            value={stats?.monthlyRevenue || 0}\n            icon={TrendingUp}\n            trend=\"+18% denne måneden\"\n            trendPositive={true}\n          />\n          <StatsCard\n            title=\"Ventende godkjenninger\"\n            value={stats?.pendingApprovals || 0}\n            icon={Clock}\n            subtitle=\"Krever handling\"\n            className=\"border-orange-200 bg-orange-50\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n          {/* Customer Management */}\n          <div className=\"xl:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"text-primary mr-3\" />\n                    Kundeadministrasjon\n                  </CardTitle>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Søk kunder...\"\n                      className=\"w-64\"\n                    />\n                    <Button size=\"sm\">\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {customersLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                    <p className=\"mt-4 text-gray-600\">Laster kunder...</p>\n                  </div>\n                ) : customers && customers.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full text-sm\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Kunde</th>\n                          <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Kommune</th>\n                          <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Abonnement</th>\n                          <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Registrert</th>\n                          <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Handlinger</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {customers.slice(0, 10).map((customer: Customer) => (\n                          <tr key={customer.id}>\n                            <td className=\"px-4 py-3\">\n                              <div className=\"font-medium text-gray-900\">{customer.fullName}</div>\n                              <div className=\"text-xs text-muted-foreground\">{customer.email}</div>\n                            </td>\n                            <td className=\"px-4 py-3 text-gray-700\">{customer.municipality}</td>\n                            <td className=\"px-4 py-3\">\n                              <Badge variant={customer.subscriptionActive ? \"default\" : \"destructive\"}>\n                                {customer.subscriptionActive ? \"Aktiv\" : \"Inaktiv\"}\n                              </Badge>\n                            </td>\n                            <td className=\"px-4 py-3 text-gray-700\">\n                              {new Date(customer.createdAt).toLocaleDateString('nb-NO')}\n                            </td>\n                            <td className=\"px-4 py-3\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => updateSubscriptionMutation.mutate({\n                                    customerId: customer.id,\n                                    active: !customer.subscriptionActive\n                                  })}\n                                  disabled={updateSubscriptionMutation.isPending}\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                                <Button size=\"sm\" variant=\"ghost\">\n                                  <Eye className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                    \n                    <div className=\"mt-4 flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Viser 1-10 av {customers.length} kunder\n                      </span>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">Forrige</Button>\n                        <Button size=\"sm\">1</Button>\n                        <Button variant=\"outline\" size=\"sm\">2</Button>\n                        <Button variant=\"outline\" size=\"sm\">3</Button>\n                        <Button variant=\"outline\" size=\"sm\">Neste</Button>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Ingen kunder funnet.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Installer Approvals */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <UserCheck className=\"text-orange-500 mr-3\" />\n                  Installatør godkjenninger\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {pendingLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                    <p className=\"mt-4 text-gray-600\">Laster ventende godkjenninger...</p>\n                  </div>\n                ) : pendingInstallers && pendingInstallers.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {pendingInstallers.map((installer: Installer) => (\n                      <div key={installer.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium text-gray-900\">{installer.companyName}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Org.nr: {installer.orgNumber} • {installer.email}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground mt-1\">\n                              Søkt: {new Date(installer.createdAt).toLocaleDateString('nb-NO')}\n                            </div>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              onClick={() => approveInstallerMutation.mutate({\n                                installerId: installer.id,\n                                approved: true\n                              })}\n                              disabled={approveInstallerMutation.isPending}\n                            >\n                              <Check className=\"h-3 w-3 mr-1\" />\n                              Godkjenn\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => approveInstallerMutation.mutate({\n                                installerId: installer.id,\n                                approved: false\n                              })}\n                              disabled={approveInstallerMutation.isPending}\n                            >\n                              <X className=\"h-3 w-3 mr-1\" />\n                              Avslå\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <UserCheck className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Ingen ventende godkjenninger.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Admin Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Administrative handlinger</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Download className=\"mr-3 h-4 w-4\" />\n                    Eksporter kundedata\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Mail className=\"mr-3 h-4 w-4\" />\n                    Send masseutsendelse\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <CreditCard className=\"mr-3 h-4 w-4\" />\n                    Administrer abonnementer\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Settings className=\"mr-3 h-4 w-4\" />\n                    Systeminnstillinger\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Geographic Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MapPin className=\"text-primary mr-3\" />\n                  Geografisk fordeling\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Oslo</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"45%\" }}></div>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">45%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Viken</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"32%\" }}></div>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">32%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Vestland</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"18%\" }}></div>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">18%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Andre</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"5%\" }}></div>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">5%</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <History className=\"text-primary mr-3\" />\n                  Nylig aktivitet\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-start space-x-3\">\n                    <UserPlus className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                    <div>\n                      <div className=\"text-gray-900\">Ny kunde registrert</div>\n                      <div className=\"text-xs text-muted-foreground\">2 min siden</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                    <div>\n                      <div className=\"text-gray-900\">Installatør godkjent</div>\n                      <div className=\"text-xs text-muted-foreground\">15 min siden</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <CreditCard className=\"h-4 w-4 text-primary mt-0.5\" />\n                    <div>\n                      <div className=\"text-gray-900\">Abonnement fornyet</div>\n                      <div className=\"text-xs text-muted-foreground\">1 time siden</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":20968},"client/src/pages/customer.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/ui/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  UserPlus, \n  Thermometer, \n  CreditCard, \n  MapPin, \n  Bell, \n  Check, \n  Star,\n  Calendar,\n  Phone,\n  Mail\n} from \"lucide-react\";\nimport { norwegianCounties } from \"@/data/municipalities\";\nimport { Link } from \"wouter\";\n\ninterface Customer {\n  id: number;\n  fullName: string;\n  email: string;\n  phone: string;\n  address: string;\n  county: string;\n  municipality: string;\n  subscriptionActive: boolean;\n}\n\ninterface HeatPump {\n  id: number;\n  model: string;\n  brand: string;\n  lastServiceDate: string;\n  nextServiceDue: string;\n}\n\ninterface Installer {\n  id: number;\n  companyName: string;\n  rating: string;\n  totalServices: number;\n  certified: boolean;\n}\n\nexport default function Customer() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCounty, setSelectedCounty] = useState<string>(\"\");\n  const [selectedMunicipality, setSelectedMunicipality] = useState<string>(\"\");\n\n  // Customer form data\n  const [customerData, setCustomerData] = useState({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    county: \"\",\n    municipality: \"\",\n  });\n\n  // Heat pump form data\n  const [heatPumpData, setHeatPumpData] = useState({\n    brand: \"\",\n    model: \"\",\n    lastServiceDate: \"\",\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Ikke autorisert\",\n        description: \"Du må logge inn for å se denne siden.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch customer data\n  const { data: customer, isLoading: customerLoading } = useQuery({\n    queryKey: [\"/api/customers/me\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Fetch heat pumps\n  const { data: heatPumps, isLoading: heatPumpsLoading } = useQuery({\n    queryKey: [\"/api/heat-pumps/me\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Fetch local installers\n  const { data: installers, isLoading: installersLoading } = useQuery({\n    queryKey: [\"/api/installers/by-municipality\", customer?.municipality],\n    enabled: !!customer?.municipality,\n    retry: false,\n  });\n\n  // Create customer mutation\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/customers\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vellykket\",\n        description: \"Kundeprofil opprettet!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers/me\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ikke autorisert\",\n          description: \"Du er logget ut. Logger inn igjen...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Feil\",\n        description: \"Kunne ikke opprette kundeprofil.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create heat pump mutation\n  const createHeatPumpMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/heat-pumps\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vellykket\",\n        description: \"Varmepumpe informasjon lagret!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/heat-pumps/me\"] });\n      setHeatPumpData({\n        brand: \"\",\n        model: \"\",\n        lastServiceDate: \"\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ikke autorisert\",\n          description: \"Du er logget ut. Logger inn igjen...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Feil\",\n        description: \"Kunne ikke lagre varmepumpe informasjon.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCustomerSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createCustomerMutation.mutate(customerData);\n  };\n\n  const handleHeatPumpSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createHeatPumpMutation.mutate(heatPumpData);\n  };\n\n  const handleCountyChange = (county: string) => {\n    setSelectedCounty(county);\n    setSelectedMunicipality(\"\");\n    setCustomerData({ ...customerData, county, municipality: \"\" });\n  };\n\n  const handleMunicipalityChange = (municipality: string) => {\n    setSelectedMunicipality(municipality);\n    setCustomerData({ ...customerData, municipality });\n  };\n\n  const selectedCountyData = norwegianCounties.find(c => c.name === selectedCounty);\n\n  if (isLoading || customerLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Laster...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Kundeportal</h2>\n          <p className=\"text-muted-foreground\">Administrer din varmepumpe og abonnement</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Customer Registration Form */}\n            {!customer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <UserPlus className=\"text-primary mr-3\" />\n                    Registrer deg som kunde\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleCustomerSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"fullName\">Fullt navn</Label>\n                        <Input\n                          id=\"fullName\"\n                          value={customerData.fullName}\n                          onChange={(e) => setCustomerData({ ...customerData, fullName: e.target.value })}\n                          placeholder=\"Ola Nordmann\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"email\">E-post</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={customerData.email}\n                          onChange={(e) => setCustomerData({ ...customerData, email: e.target.value })}\n                          placeholder=\"ola@example.com\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"address\">Adresse</Label>\n                      <Input\n                        id=\"address\"\n                        value={customerData.address}\n                        onChange={(e) => setCustomerData({ ...customerData, address: e.target.value })}\n                        placeholder=\"Storgata 1, 0001 Oslo\"\n                        required\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"county\">Fylke</Label>\n                        <Select value={selectedCounty} onValueChange={handleCountyChange}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Velg fylke\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {norwegianCounties.map((county) => (\n                              <SelectItem key={county.code} value={county.name}>\n                                {county.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"municipality\">Kommune</Label>\n                        <Select \n                          value={selectedMunicipality} \n                          onValueChange={handleMunicipalityChange}\n                          disabled={!selectedCounty}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Velg kommune\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {selectedCountyData?.municipalities.map((municipality) => (\n                              <SelectItem key={municipality.code} value={municipality.name}>\n                                {municipality.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"phone\">Telefonnummer</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={customerData.phone}\n                        onChange={(e) => setCustomerData({ ...customerData, phone: e.target.value })}\n                        placeholder=\"+47 123 45 678\"\n                        required\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={createCustomerMutation.isPending}\n                      className=\"w-full\"\n                    >\n                      {createCustomerMutation.isPending ? \"Registrerer...\" : \"Registrer meg\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Heat Pump Information */}\n            {customer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Thermometer className=\"text-primary mr-3\" />\n                    Varmepumpe informasjon\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleHeatPumpSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"brand\">Merke</Label>\n                        <Input\n                          id=\"brand\"\n                          value={heatPumpData.brand}\n                          onChange={(e) => setHeatPumpData({ ...heatPumpData, brand: e.target.value })}\n                          placeholder=\"Mitsubishi Electric\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"model\">Modell</Label>\n                        <Input\n                          id=\"model\"\n                          value={heatPumpData.model}\n                          onChange={(e) => setHeatPumpData({ ...heatPumpData, model: e.target.value })}\n                          placeholder=\"MSZ-LN25VG\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"lastServiceDate\">Siste service dato</Label>\n                      <Input\n                        id=\"lastServiceDate\"\n                        type=\"date\"\n                        value={heatPumpData.lastServiceDate}\n                        onChange={(e) => setHeatPumpData({ ...heatPumpData, lastServiceDate: e.target.value })}\n                        required\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={createHeatPumpMutation.isPending}\n                    >\n                      {createHeatPumpMutation.isPending ? \"Lagrer...\" : \"Lagre informasjon\"}\n                    </Button>\n                  </form>\n\n                  {/* Existing Heat Pumps */}\n                  {heatPumps && heatPumps.length > 0 && (\n                    <div className=\"mt-6\">\n                      <h4 className=\"font-semibold mb-3\">Dine varmepumper</h4>\n                      <div className=\"space-y-2\">\n                        {heatPumps.map((pump: HeatPump) => (\n                          <div key={pump.id} className=\"p-3 border rounded-lg\">\n                            <div className=\"flex justify-between items-start\">\n                              <div>\n                                <div className=\"font-medium\">{pump.brand} {pump.model}</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Siste service: {new Date(pump.lastServiceDate).toLocaleDateString('nb-NO')}\n                                </div>\n                              </div>\n                              <Badge variant={pump.nextServiceDue && new Date(pump.nextServiceDue) < new Date() ? \"destructive\" : \"secondary\"}>\n                                {pump.nextServiceDue && new Date(pump.nextServiceDue) < new Date() ? \"Service forfaller\" : \"OK\"}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Subscription Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"text-primary mr-3\" />\n                  Abonnement\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gradient-to-r from-primary to-blue-600 text-white rounded-lg p-4 mb-4\">\n                  <div className=\"text-2xl font-bold\">29 kr</div>\n                  <div className=\"text-sm opacity-90\">per måned</div>\n                </div>\n                \n                <ul className=\"space-y-2 text-sm text-gray-600 mb-6\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                    Servicepåminnelser\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                    Installatør matching\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2\" />\n                    Tilstandsovervåking\n                  </li>\n                </ul>\n                \n                <Link href=\"/subscribe\">\n                  <Button className=\"w-full bg-green-600 hover:bg-green-700\">\n                    <CreditCard className=\"mr-2 h-4 w-4\" />\n                    Abonner nå\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Local Installers */}\n            {customer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <MapPin className=\"text-primary mr-3\" />\n                    Installatører i ditt område\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {installersLoading ? (\n                    <div className=\"text-center py-4\">\n                      <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                      <p className=\"mt-2 text-sm text-gray-600\">Laster installatører...</p>\n                    </div>\n                  ) : installers && installers.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {installers.slice(0, 3).map((installer: Installer) => (\n                        <div key={installer.id} className=\"border rounded-lg p-3 hover:bg-gray-50 cursor-pointer\">\n                          <div className=\"font-medium text-gray-900\">{installer.companyName}</div>\n                          <div className=\"text-sm text-muted-foreground flex items-center\">\n                            {customer.municipality} • \n                            <Star className=\"h-3 w-3 text-yellow-500 ml-1 mr-1\" />\n                            {installer.rating} ({installer.totalServices} tjenester)\n                          </div>\n                          {installer.certified && (\n                            <div className=\"text-xs text-green-600 mt-1\">Sertifisert</div>\n                          )}\n                        </div>\n                      ))}\n                      <Button variant=\"outline\" className=\"w-full mt-4\">\n                        Se alle installatører\n                      </Button>\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-gray-600 text-center py-4\">\n                      Ingen installatører funnet i ditt område ennå.\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Service Reminders */}\n            {customer && heatPumps && heatPumps.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Bell className=\"text-yellow-500 mr-3\" />\n                    Kommende påminnelser\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {heatPumps.map((pump: HeatPump) => {\n                      const nextServiceDate = new Date(pump.nextServiceDue);\n                      const isDue = nextServiceDate < new Date();\n                      \n                      return (\n                        <div key={pump.id} className={`border rounded-lg p-3 ${isDue ? 'bg-yellow-50 border-yellow-200' : 'bg-gray-50'}`}>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {pump.brand} {pump.model}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {isDue ? 'Service forfaller snart' : 'Neste service'}\n                          </div>\n                          <div className=\"text-xs text-gray-600\">\n                            {nextServiceDate.toLocaleDateString('nb-NO')}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":20681},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/ui/navigation\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (user) {\n      // Redirect based on user role\n      if (user.role === 'admin') {\n        setLocation('/admin');\n      } else if (user.role === 'installer') {\n        setLocation('/installer');\n      } else {\n        setLocation('/customer');\n      }\n    }\n  }, [user, setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Velkommen til VarmepumpeTilsynet\n          </h1>\n          <p className=\"text-gray-600\">\n            Omdirigerer deg til riktig portal...\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1048},"client/src/pages/installer.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/ui/navigation\";\nimport StatsCard from \"@/components/ui/stats-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Building, \n  Map, \n  Users, \n  BarChart3, \n  CheckCircle, \n  Edit, \n  Calendar,\n  Star,\n  ClockIcon\n} from \"lucide-react\";\nimport { norwegianCounties } from \"@/data/municipalities\";\n\ninterface Installer {\n  id: number;\n  companyName: string;\n  orgNumber: string;\n  contactPerson: string;\n  email: string;\n  phone: string;\n  address: string;\n  certified: boolean;\n  approved: boolean;\n  rating: string;\n  totalServices: number;\n}\n\ninterface ServiceArea {\n  id: number;\n  county: string;\n  municipality: string;\n}\n\ninterface Customer {\n  id: number;\n  fullName: string;\n  email: string;\n  phone: string;\n  municipality: string;\n  subscriptionActive: boolean;\n}\n\nexport default function Installer() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCounty, setSelectedCounty] = useState<string>(\"\");\n  const [selectedMunicipalities, setSelectedMunicipalities] = useState<string[]>([]);\n\n  // Installer form data\n  const [installerData, setInstallerData] = useState({\n    companyName: \"\",\n    orgNumber: \"\",\n    contactPerson: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Ikke autorisert\",\n        description: \"Du må logge inn for å se denne siden.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch installer data\n  const { data: installer, isLoading: installerLoading } = useQuery({\n    queryKey: [\"/api/installers/me\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Fetch service areas\n  const { data: serviceAreas, isLoading: serviceAreasLoading } = useQuery({\n    queryKey: [\"/api/service-areas/me\"],\n    enabled: isAuthenticated && !!installer,\n    retry: false,\n  });\n\n  // Fetch customers in service areas\n  const { data: customers, isLoading: customersLoading } = useQuery({\n    queryKey: [\"/api/customers/by-municipality\", serviceAreas?.[0]?.municipality],\n    enabled: !!serviceAreas && serviceAreas.length > 0,\n    retry: false,\n  });\n\n  // Create installer mutation\n  const createInstallerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/installers\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vellykket\",\n        description: \"Installatørprofil opprettet! Venter på godkjenning.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/installers/me\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ikke autorisert\",\n          description: \"Du er logget ut. Logger inn igjen...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Feil\",\n        description: \"Kunne ikke opprette installatørprofil.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update service areas mutation\n  const updateServiceAreasMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/service-areas\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vellykket\",\n        description: \"Serviceområder oppdatert!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-areas/me\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ikke autorisert\",\n          description: \"Du er logget ut. Logger inn igjen...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Feil\",\n        description: \"Kunne ikke oppdatere serviceområder.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInstallerSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createInstallerMutation.mutate(installerData);\n  };\n\n  const handleServiceAreaSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const serviceAreasData = {\n      serviceAreas: selectedMunicipalities.map(municipality => ({\n        county: selectedCounty,\n        municipality,\n      })),\n    };\n    updateServiceAreasMutation.mutate(serviceAreasData);\n  };\n\n  const handleMunicipalityChange = (municipality: string, checked: boolean) => {\n    if (checked) {\n      setSelectedMunicipalities([...selectedMunicipalities, municipality]);\n    } else {\n      setSelectedMunicipalities(selectedMunicipalities.filter(m => m !== municipality));\n    }\n  };\n\n  const selectedCountyData = norwegianCounties.find(c => c.name === selectedCounty);\n\n  if (isLoading || installerLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Laster...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Installatørportal</h2>\n          <p className=\"text-muted-foreground\">Administrer servicetilbud og kunder</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n          {/* Main Content */}\n          <div className=\"xl:col-span-2 space-y-6\">\n            {/* Business Registration */}\n            {!installer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Building className=\"text-primary mr-3\" />\n                    Bedriftsregistrering\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleInstallerSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"companyName\">Bedriftsnavn</Label>\n                        <Input\n                          id=\"companyName\"\n                          value={installerData.companyName}\n                          onChange={(e) => setInstallerData({ ...installerData, companyName: e.target.value })}\n                          placeholder=\"ThermoTeknikk AS\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"orgNumber\">Organisasjonsnummer</Label>\n                        <Input\n                          id=\"orgNumber\"\n                          value={installerData.orgNumber}\n                          onChange={(e) => setInstallerData({ ...installerData, orgNumber: e.target.value })}\n                          placeholder=\"123 456 789\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"contactPerson\">Kontaktperson</Label>\n                      <Input\n                        id=\"contactPerson\"\n                        value={installerData.contactPerson}\n                        onChange={(e) => setInstallerData({ ...installerData, contactPerson: e.target.value })}\n                        placeholder=\"Kari Hansen\"\n                        required\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"email\">E-post</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={installerData.email}\n                          onChange={(e) => setInstallerData({ ...installerData, email: e.target.value })}\n                          placeholder=\"kari@thermoteknikk.no\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"phone\">Telefon</Label>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          value={installerData.phone}\n                          onChange={(e) => setInstallerData({ ...installerData, phone: e.target.value })}\n                          placeholder=\"+47 987 65 432\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"address\">Adresse</Label>\n                      <Input\n                        id=\"address\"\n                        value={installerData.address}\n                        onChange={(e) => setInstallerData({ ...installerData, address: e.target.value })}\n                        placeholder=\"Bedriftsvei 1, 0001 Oslo\"\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={createInstallerMutation.isPending}\n                      className=\"w-full\"\n                    >\n                      {createInstallerMutation.isPending ? \"Registrerer...\" : \"Registrer bedrift\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Service Areas */}\n            {installer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Map className=\"text-primary mr-3\" />\n                    Serviceområder\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleServiceAreaSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <Label htmlFor=\"county\">Fylke</Label>\n                        <Select value={selectedCounty} onValueChange={setSelectedCounty}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Velg fylke\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {norwegianCounties.map((county) => (\n                              <SelectItem key={county.code} value={county.name}>\n                                {county.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label>Kommuner</Label>\n                        <div className=\"border border-gray-300 rounded-md p-3 max-h-32 overflow-y-auto\">\n                          {selectedCountyData ? (\n                            <div className=\"space-y-2\">\n                              {selectedCountyData.municipalities.map((municipality) => (\n                                <div key={municipality.code} className=\"flex items-center space-x-2\">\n                                  <Checkbox \n                                    id={municipality.code}\n                                    checked={selectedMunicipalities.includes(municipality.name)}\n                                    onCheckedChange={(checked) => \n                                      handleMunicipalityChange(municipality.name, checked as boolean)\n                                    }\n                                  />\n                                  <Label \n                                    htmlFor={municipality.code} \n                                    className=\"text-sm cursor-pointer\"\n                                  >\n                                    {municipality.name}\n                                  </Label>\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-gray-500\">Velg et fylke først</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={updateServiceAreasMutation.isPending || !selectedCounty || selectedMunicipalities.length === 0}\n                    >\n                      {updateServiceAreasMutation.isPending ? \"Lagrer...\" : \"Lagre serviceområder\"}\n                    </Button>\n                  </form>\n\n                  {/* Current Service Areas */}\n                  {serviceAreas && serviceAreas.length > 0 && (\n                    <div className=\"mt-6\">\n                      <h4 className=\"font-semibold mb-3\">Nåværende serviceområder</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {serviceAreas.map((area: ServiceArea) => (\n                          <Badge key={area.id} variant=\"secondary\">\n                            {area.municipality}, {area.county}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Customer Requests */}\n            {installer && installer.approved && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"text-primary mr-3\" />\n                    Potensielle kunder i ditt område\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {customersLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                      <p className=\"mt-4 text-gray-600\">Laster kunder...</p>\n                    </div>\n                  ) : customers && customers.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead className=\"bg-gray-50\">\n                          <tr>\n                            <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Kunde</th>\n                            <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Kommune</th>\n                            <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Abonnement</th>\n                            <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Handling</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-gray-200\">\n                          {customers.map((customer: Customer) => (\n                            <tr key={customer.id}>\n                              <td className=\"px-4 py-3\">\n                                <div className=\"font-medium text-gray-900\">{customer.fullName}</div>\n                                <div className=\"text-xs text-muted-foreground\">{customer.email}</div>\n                              </td>\n                              <td className=\"px-4 py-3 text-gray-700\">{customer.municipality}</td>\n                              <td className=\"px-4 py-3\">\n                                <Badge variant={customer.subscriptionActive ? \"default\" : \"destructive\"}>\n                                  {customer.subscriptionActive ? \"Aktiv\" : \"Inaktiv\"}\n                                </Badge>\n                              </td>\n                              <td className=\"px-4 py-3\">\n                                <Button size=\"sm\" variant=\"outline\">\n                                  Kontakt\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">Ingen kunder funnet i ditt serviceområde ennå.</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Stats Cards */}\n            {installer && (\n              <div className=\"space-y-4\">\n                <StatsCard\n                  title=\"Potensielle kunder\"\n                  value={customers?.length || 0}\n                  icon={Users}\n                  className=\"bg-blue-50\"\n                />\n                <StatsCard\n                  title=\"Utførte servicer\"\n                  value={installer.totalServices}\n                  icon={CheckCircle}\n                  className=\"bg-green-50\"\n                />\n                <StatsCard\n                  title=\"Gjennomsnittlig rating\"\n                  value={parseFloat(installer.rating).toFixed(1)}\n                  icon={Star}\n                  className=\"bg-yellow-50\"\n                />\n              </div>\n            )}\n\n            {/* Certification Status */}\n            {installer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <CheckCircle className=\"text-green-500 mr-3\" />\n                    Sertifiseringsstatus\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Bedrift registrert</span>\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Godkjent av admin</span>\n                      {installer.approved ? (\n                        <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      ) : (\n                        <ClockIcon className=\"h-5 w-5 text-yellow-500\" />\n                      )}\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Sertifisert</span>\n                      {installer.certified ? (\n                        <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      ) : (\n                        <ClockIcon className=\"h-5 w-5 text-yellow-500\" />\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Approval Status */}\n            {installer && !installer.approved && (\n              <Card className=\"border-yellow-200 bg-yellow-50\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-yellow-700\">\n                    <ClockIcon className=\"text-yellow-500 mr-3\" />\n                    Venter på godkjenning\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-yellow-700\">\n                    Din bedrift er registrert, men venter på godkjenning fra administrator. \n                    Du vil få tilgang til kunder når godkjenningen er fullført.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Quick Actions */}\n            {installer && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Hurtighandlinger</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Edit className=\"mr-3 h-4 w-4\" />\n                      Oppdater profil\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Calendar className=\"mr-3 h-4 w-4\" />\n                      Administrer tilgjengelighet\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Star className=\"mr-3 h-4 w-4\" />\n                      Se anmeldelser\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":22303},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Thermometer, CheckCircle, Users, Settings, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <Thermometer className=\"text-primary text-2xl\" />\n              <h1 className=\"text-xl font-bold text-gray-900\">VarmepumpeTilsynet</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => window.location.href = '/api/login'}\n              >\n                Logg inn\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/api/login'}\n              >\n                Kom i gang\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h2 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6\">\n            Profesjonell varmepumpe\n            <span className=\"text-primary\"> service</span>\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            VarmepumpeTilsynet kobler deg med lokale, sertifiserte installatører \n            og holder deg oppdatert på servicebehov for din varmepumpe.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => window.location.href = '/api/login'}\n              className=\"text-lg px-8 py-4\"\n            >\n              Registrer deg som kunde\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              onClick={() => window.location.href = '/api/login'}\n              className=\"text-lg px-8 py-4\"\n            >\n              Bli installatør\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h3 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            Hvorfor velge VarmepumpeTilsynet?\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Automatiske påminnelser</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 text-center\">\n                  Få påminnelser om når din varmepumpe trenger service, \n                  slik at du alltid har optimal ytelse.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"text-center\">\n                <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Lokale installatører</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 text-center\">\n                  Vi matcher deg med kvalifiserte installatører i ditt \n                  område som kjenner dine lokale forhold.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"text-center\">\n                <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Sertifiserte fagfolk</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 text-center\">\n                  Alle våre installatører er sertifiserte og godkjente, \n                  slik at du kan stole på kvaliteten.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h3 className=\"text-3xl font-bold text-gray-900 mb-12\">\n            Enkelt og rimelig\n          </h3>\n          \n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Abonnement</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-gradient-to-r from-primary to-blue-600 text-white rounded-lg p-6 mb-6\">\n                <div className=\"text-4xl font-bold\">29 kr</div>\n                <div className=\"text-lg opacity-90\">per måned</div>\n              </div>\n              \n              <ul className=\"space-y-3 text-left mb-6\">\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-3\" />\n                  Servicepåminnelser\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-3\" />\n                  Installatør matching\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-3\" />\n                  Tilstandsovervåking\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-3\" />\n                  Kundesupport\n                </li>\n              </ul>\n              \n              <Button \n                className=\"w-full\" \n                size=\"lg\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                Kom i gang i dag\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <Thermometer className=\"text-primary text-2xl\" />\n            <h4 className=\"text-xl font-bold\">VarmepumpeTilsynet</h4>\n          </div>\n          <p className=\"text-gray-400 mb-4\">\n            Drevet av Avalia Digital AS\n          </p>\n          <p className=\"text-gray-400 text-sm\">\n            © 2024 VarmepumpeTilsynet. Alle rettigheter reservert.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6935},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/ui/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, CreditCard, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsProcessing(true);\n\n    if (!stripe || !elements) {\n      setIsProcessing(false);\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/customer`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Betaling feilet\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Betaling vellykket\",\n        description: \"Takk for at du abonnerer på VarmepumpeTilsynet!\",\n      });\n    }\n    \n    setIsProcessing(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"p-4 border rounded-lg\">\n        <PaymentElement />\n      </div>\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        size=\"lg\"\n        disabled={!stripe || isProcessing}\n      >\n        {isProcessing ? \"Behandler...\" : \"Abonner nå - 29 kr/mnd\"}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Ikke autorisert\",\n        description: \"Du må logge inn for å abonnere.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // Create subscription as soon as the page loads\n      apiRequest(\"POST\", \"/api/create-subscription\")\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.clientSecret) {\n            setClientSecret(data.clientSecret);\n          } else {\n            toast({\n              title: \"Feil\",\n              description: \"Kunne ikke opprette abonnement.\",\n              variant: \"destructive\",\n            });\n          }\n        })\n        .catch((error) => {\n          if (isUnauthorizedError(error)) {\n            toast({\n              title: \"Ikke autorisert\",\n              description: \"Du er logget ut. Logger inn igjen...\",\n              variant: \"destructive\",\n            });\n            setTimeout(() => {\n              window.location.href = \"/api/login\";\n            }, 500);\n            return;\n          }\n          toast({\n            title: \"Feil\",\n            description: \"Kunne ikke opprette abonnement.\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [isAuthenticated, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Laster...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navigation />\n        <main className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Forbereder abonnement...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation />\n      <main className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/customer\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Tilbake til kundeportal\n            </Button>\n          </Link>\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Abonner på VarmepumpeTilsynet</h2>\n          <p className=\"text-muted-foreground\">\n            Få professionell oppfølging av din varmepumpe for kun 29 kr per måned\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Subscription Benefits */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CheckCircle className=\"text-green-500 mr-3\" />\n                  Hva får du?\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-4\">\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-3 mt-0.5\" />\n                    <div>\n                      <div className=\"font-medium\">Automatiske servicepåminnelser</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Få påminnelser på e-post når varmepumpen din trenger service\n                      </div>\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-3 mt-0.5\" />\n                    <div>\n                      <div className=\"font-medium\">Installatør matching</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Få forslag til kvalifiserte installatører i ditt område\n                      </div>\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-3 mt-0.5\" />\n                    <div>\n                      <div className=\"font-medium\">Tilstandsovervåking</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Hold oversikt over servicestatus og neste service\n                      </div>\n                    </div>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mr-3 mt-0.5\" />\n                    <div>\n                      <div className=\"font-medium\">Kundesupport</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Få hjelp og veiledning når du trenger det\n                      </div>\n                    </div>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Pricing */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Prising</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gradient-to-r from-primary to-blue-600 text-white rounded-lg p-6 mb-4\">\n                  <div className=\"text-3xl font-bold\">29 kr</div>\n                  <div className=\"text-lg opacity-90\">per måned</div>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Ingen opprettelsesgebyr. Kan kanselleres når som helst.\n                  Automatisk fornyelse hver måned.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Form */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"text-primary mr-3\" />\n                  Betalingsinformasjon\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"mb-6\">\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Du abonnerer som: <strong>{user?.firstName} {user?.lastName}</strong>\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Sikker betaling behandlet av Stripe. Dine betalingsopplysninger er krypterte og beskyttede.\n                  </p>\n                </div>\n                \n                <Elements stripe={stripePromise} options={{ clientSecret }}>\n                  <SubscribeForm />\n                </Elements>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9794},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\nimport { Thermometer, User, Settings, Bell } from \"lucide-react\";\nimport { Button } from \"./button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"./avatar\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const getActiveClass = (path: string) => {\n    return location === path \n      ? \"text-primary border-b-2 border-primary\" \n      : \"text-muted-foreground hover:text-foreground\";\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-3\">\n            <Thermometer className=\"text-primary text-2xl\" />\n            <h1 className=\"text-xl font-bold text-gray-900\">VarmepumpeTilsynet</h1>\n          </div>\n          \n          <nav className=\"hidden md:flex space-x-8\">\n            <Link href=\"/customer\">\n              <Button variant=\"ghost\" className={cn(\"pb-4 px-1 font-medium rounded-none\", getActiveClass(\"/customer\"))}>\n                <User className=\"mr-2 h-4 w-4\" />\n                Kundeportal\n              </Button>\n            </Link>\n            <Link href=\"/installer\">\n              <Button variant=\"ghost\" className={cn(\"pb-4 px-1 font-medium rounded-none\", getActiveClass(\"/installer\"))}>\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Installatørportal\n              </Button>\n            </Link>\n            {user?.role === 'admin' && (\n              <Link href=\"/admin\">\n                <Button variant=\"ghost\" className={cn(\"pb-4 px-1 font-medium rounded-none\", getActiveClass(\"/admin\"))}>\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  Adminpanel\n                </Button>\n              </Link>\n            )}\n          </nav>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"icon\">\n              <Bell className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={user?.profileImageUrl} alt=\"Bruker avatar\" />\n                <AvatarFallback>\n                  {user?.firstName?.[0]}{user?.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              <span className=\"text-sm font-medium text-gray-700\">\n                {user?.firstName} {user?.lastName}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Mobile Navigation */}\n        <div className=\"md:hidden border-t bg-white\">\n          <div className=\"flex justify-around py-2\">\n            <Link href=\"/customer\">\n              <Button variant=\"ghost\" className={cn(\"flex flex-col items-center py-2 px-4\", getActiveClass(\"/customer\"))}>\n                <User className=\"text-lg\" />\n                <span className=\"text-xs mt-1\">Kunde</span>\n              </Button>\n            </Link>\n            <Link href=\"/installer\">\n              <Button variant=\"ghost\" className={cn(\"flex flex-col items-center py-2 px-4\", getActiveClass(\"/installer\"))}>\n                <Settings className=\"text-lg\" />\n                <span className=\"text-xs mt-1\">Installatør</span>\n              </Button>\n            </Link>\n            {user?.role === 'admin' && (\n              <Link href=\"/admin\">\n                <Button variant=\"ghost\" className={cn(\"flex flex-col items-center py-2 px-4\", getActiveClass(\"/admin\"))}>\n                  <Settings className=\"text-lg\" />\n                  <span className=\"text-xs mt-1\">Admin</span>\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3966},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.tsx":{"content":"import { Card, CardContent } from \"./card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon: LucideIcon;\n  trend?: string;\n  trendPositive?: boolean;\n  className?: string;\n}\n\nexport default function StatsCard({\n  title,\n  value,\n  subtitle,\n  icon: Icon,\n  trend,\n  trendPositive,\n  className,\n}: StatsCardProps) {\n  return (\n    <Card className={className}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-2xl font-bold text-gray-900\">{value}</div>\n            <div className=\"text-sm text-muted-foreground\">{title}</div>\n          </div>\n          <Icon className=\"text-primary text-2xl\" />\n        </div>\n        {trend && (\n          <div className={`mt-2 text-xs ${trendPositive ? 'text-green-600' : 'text-red-600'}`}>\n            {trend}\n          </div>\n        )}\n        {subtitle && (\n          <div className=\"mt-2 text-xs text-muted-foreground\">{subtitle}</div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1116},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}